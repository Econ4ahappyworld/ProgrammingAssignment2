}
submit()
mad_libs <- function(...){
# Do your argument unpacking here!
list(...)
place <- wellington
adjective <- funny
noun <-computer
# Don't modify any code below this comment.
# Notice the variables you'll need to create in order for the code below to
# be functional!
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}mad_libs <- function(...){
# Do your argument unpacking here!
list(...)
place <- wellington
adjective <- funny
noun <-computer
# Don't modify any code below this comment.
# Notice the variables you'll need to create in order for the code below to
# be functional!
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
mad_libs <- function(...){
# Do your argument unpacking here!
list(...)
place <- wellington
adjective <- funny
noun <-computer
# Don't modify any code below this comment.
# Notice the variables you'll need to create in order for the code below to
# be functional!
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
submit()
mad_libs <- function(...){
# Do your argument unpacking here!
args <-  list(...)
place <- args[["wellington"]]
adjective <- args[["funny""]]
noun <-args[["computer"]]
# Don't modify any code below this comment.
# Notice the variables you'll need to create in order for the code below to
# be functional!
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
mad_libs <- function(...){
# Do your argument unpacking here!
args <-  list(...)
place <- args[["wellington"]]
adjective <- args[["funny""]]
noun <-args[["computer"]]
# Don't modify any code below this comment.
# Notice the variables you'll need to create in order for the code below to
# be functional!
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
mad_libs <- function(...){
# Do your argument unpacking here!
args <-  list(...)
place <- args[["wellington"]]
adjective <- args[["funny""]]
noun <-args[["computer"]]
# Don't modify any code below this comment.
# Notice the variables you'll need to create in order for the code below to
# be functional!
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
mad_libs <- function(...){
# Do your argument unpacking here!
args <-  list(...)
place <- args[["wellington"]]
adjective <- args[["funny""]]
noun <-args[["computer"]]
# Don't modify any code below this comment.
# Notice the variables you'll need to create in order for the code below to
# be functional!
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
submit()
mad_libs <- function(...){
# Do your argument unpacking here!
args <-  list(...)
place <- args[["wellington"]]
adjective <- args[["funny"]]
noun <-args[["computer"]]
# Don't modify any code below this comment.
# Notice the variables you'll need to create in order for the code below to
# be functional!
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
submit()
mad_libs <- function(...){
# Do your argument unpacking here!
args <-  list(...)
place <- args[["wellington"]]
adjective <- args[["funny"]]
noun <-args[["computer"]]
# Don't modify any code below this comment.
# Notice the variables you'll need to create in order for the code below to
# be functional!
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
submit()
mad_libs <- function(...){
# Do your argument unpacking here!
args <-  list(...)
News_from <- args[["News from"]]
place <- args[["wellington"]]
today_where <-args[["today where"]]
adjective <- args[["funny"]]
students <- args[["students took to the streets in protest of the new"]]
noun <-args[["computer"]]
being <- args[["being installed on campus."]]
# Don't modify any code below this comment.
# Notice the variables you'll need to create in order for the code below to
# be functional!
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
submit()
mad_libs <- function(...){
# Do your argument unpacking here!
args <-  list(...)
News_from <- args[["News from"]]
place <- args[["wellington"]]
today_where <-args[["today where"]]
adjective <- args[["funny"]]
students <- args[["students took to the streets in protest of the new"]]
noun <-args[["computer"]]
being <- args[["being installed on campus."]]
# Don't modify any code below this comment.
# Notice the variables you'll need to create in order for the code below to
# be functional!
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
mad_libs <- function(...){
# Do your argument unpacking here!
args <- list(...)
place <- args[["wellington"]]
adjective <- args[["funny"]]
noun <-args[["computer"]]
# Don't modify any code below this comment.
# Notice the variables you'll need to create in order for the code below to
# be functional!
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
submit()
mad_libs <- function(...){
# Do your argument unpacking here!
args <- list(...)
place <- "wellington"
adjective <- "funny"
noun <- "funny"
# Don't modify any code below this comment.
# Notice the variables you'll need to create in order for the code below to
# be functional!
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
submi()
submit()
mad_libs <- function(...){
# Do your argument unpacking here!
args <- list(...)
place <- args[["wellington"]]
adjective <- args[["funny"]]
noun <- args[["funny"]]
# Don't modify any code below this comment.
# Notice the variables you'll need to create in order for the code below to
# be functional!
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
submit()
source('C:/Users/twilson/AppData/Local/Temp/RtmpItobsM/mad_libs.R')
mad_libs <- function(...){
# Do your argument unpacking here!
args <- list(...)
place <- args[["wellington"]]
adjective <- args[["funny"]]
noun <- args[["sd"]]
# Don't modify any code below this comment.
# Notice the variables you'll need to create in order for the code below to
# be functional!
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
submit()
mad_libs
mad_libs <- function(...){
# Do your argument unpacking here!
args <- list(...)
place <- args[["wellington"]]
adjective <- args[["funny"]]
noun <- args[["sd"]]
# Don't modify any code below this comment.
# Notice the variables you'll need to create in order for the code below to
# be functional!
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
submit()
# Let's explore how to "unpack" arguments from an ellipses when you use the
# ellipses as an argument in a function. Below I have an example function that
# is supposed to add two explicitly named arguments called alpha and beta.
#
# add_alpha_and_beta <- function(...){
#   # First we must capture the ellipsis inside of a list
#   # and then assign the list to a variable. Let's name this
#   # variable `args`.
#
#   args <- list(...)
#
#   # We're now going to assume that there are two named arguments within args
#   # with the names `alpha` and `beta.` We can extract named arguments from
#   # the args list by used the name of the argument and double brackets. The
#   # `args` variable is just a regular list after all!
#
#   alpha <- args[["alpha"]]
#   beta  <- args[["beta"]]
#
#   # Then we return the sum of alpha and beta.
#
#   alpha + beta
# }
#
# Have you ever played Mad Libs before? The function below will construct a
# sentence from parts of speech that you provide as arguments. We'll write most
# of the function, but you'll need to unpack the appropriate arguments from the
# ellipses.
mad_libs <- function(...){
# Do your argument unpacking here!
args <- list(...)
place <- args[["place"]]
adjective <- args[["adjective"]]
noun <- args[["noun"]]
# Don't modify any code below this comment.
# Notice the variables you'll need to create in order for the code below to
# be functional!
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
submit()
madlibs(kjl,aslkdj,sakdjlk)
mad_libs(kjl,aslkdj,sakdjlk)
mad_libs(place="ads",adjective="asd",noun = "adssad")
"%p%" <- function(x,y){
# Remember to add arguments!
paste(x,y)
}
submit()
I %p% love %p% R!
"I" %p% "love" %p% "R!"
x <- list(a=1:5,b=rnorm(10))
$a
lapply(x,mean)
library("swirl")
swirl()
0
0
library("swirl")
swirl()
exit
help
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_list <- sapply(flags, class)
cls_vect <- sapply(flags, class)
cls_vect
class(cls_vect)
sum(flags$orange)
flags_colors <- flags[,11:17]
flags_colors <- flags[, 11:17]
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
view(mat)
mat
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
library(datasets)
data(iris)
?tapply
tapply(iris, iris$Species)
tapply(iris, iris$Species, mean)
tapply(iris$Sapal.Length, iris$Species, mean)
iris$Sapal.Length
ls(iris$Sapal.Length)
head(iris)
tapply(iris$Sepal.Length, iris$Species, mean)
apply(iris[, 1:4], 2, mean)
apply(iris, 1, mean)
rowMeans(iris[, 1:4])
apply(iris, 2, mean)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
sapply(mtcars, cyl, mean)
with(mtcars, tapply(mpg, cyl, mean))
mean(mtcars$mpg, mtcars$cyl)
split(mtcars, mtcars$cyl)
with(mtcars, tapply(mpg, cyl, mean))
sapply(split(mtcars, mtcars$cyl),mean($hp)
sapply(split(mtcars, mtcars$cyl),mean($hp)
tapply(mtcars$hp,mtcars$cyl, mean)
a <- tapply(mtcars$hp,mtcars$cyl, mean)
a[1] - a[3]
m <- NULL
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
?return
?function
)
?function()
a;lkds;l
get <- function ()
}
?list
a <- 1:6
list(a)
library("swirl")
swirl()
info()
main()
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags,class)
vapply(flags,class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
sample(1:10,4)
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
array(y)
plot(y)
plot(y,x)
plot(x,y)
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
##function plusFunctions stores two functions:
## plustwo() : sums 2 to the given value
## plusthree() : sums 3 to the given value
plusFunctions <- function (){
plustwo <- function(y) {
x <- y + 2
return(x)
}
plusthree <- function(y) {
x <- y + 3
return(x)
}
#the following line stores the two functions:
list(plustwo = plustwo, plusthree = plusthree)
}
plusFunctions(1)
plusFunctions(1,2)
?plusFunctions
str(plusFunctions)
## This function creates a special "vector" which is really a list
## Put comments here that give an overall description of what your
## functions do
## This function creates a special "vector" which is really a list
## containing a function to (1) set the value of the matrix, (2) get the
## value of the matrix, (3) set the value of the inverse matrix, (4) get the
## value of the inverse matrix
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y){
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## This function calculates the inverse of a matrix. It first checks to see
## whether this computation has been done before and stored in the cache.
## If it has been, then it takes the inverted matrix from the cache.
## If it hasn't been, then it performs the inversion.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get
m <- solve(data, ...)
x$setinverse(m)
m
}
m <- matrix(c(-1, -2, 1, 1), 2,2)
m
x <- makeCacheMatrix(m)
x$get()
inv <- cacheSolve(x)
inv
inv <- cacheSolve(x)
setwd("C:/Users/twilson/Desktop/R/R_Crse/ProgrammingAssignment2")
getrwd()
getwd()
setwd("C:/Users/twilson/Desktop/R/R_Crse/ProgrammingAssignment2")
source("cachematrix.R")
m=matrix(c(9,10,3,20,25,30,35,40,45,50,3,8,65,70,75,80), nrow=4, byrow=T)
m
getrwd()
setwd("C:/Users/twilson/Desktop/R/R_Crse/ProgrammingAssignment2")
source("cachematrix.R")
m=matrix(c(9,10,3,20,25,30,35,40,45,50,3,8,65,70,75,80), nrow=4, byrow=T)
m
setwd("C:/Users/twilson/Desktop/R/R_Crse/ProgrammingAssignment2")
source("cachematrix.R")
m=matrix(c(9,10,3,20,25,30,35,40,45,50,3,8,65,70,75,80), nrow=4, byrow=T)
m
nm = makeCacheMatrix(m)
cacheSolve(nm)
cacheSolve(nm)
im = cacheSolve(nm)
om = makeCacheMatrix(im)
cacheSolve(om)
cacheSolve(om)
cacheSolve(om)
