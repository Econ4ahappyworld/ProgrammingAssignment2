cacheSolve(nm)
cacheSolve(nm)
im = cacheSolve(nm)
om = makeCacheMatrix(im)
cacheSolve(om)
cacheSolve(om)
setwd("C:/Users/twilson/Desktop/R/R_Crse/ProgrammingAssignment2")
source("cachematrix.R")
m=matrix(c(9,10,3,20,25,30,35,40,45,50,3,8,65,70,75,80), nrow=4, byrow=T)
m
nm = makeCacheMatrix(m)
cacheSolve(nm)
cacheSolve(nm)
im = cacheSolve(nm)
om = makeCacheMatrix(im)
cacheSolve(om)
cacheSolve(om)
## These two functions are used to invert a matrix.  Most importantly, they
## ensure that
## This function creates a special "vector" which is really a list
## containing a function to (1) set the value of the matrix, (2) get the
## value of the matrix, (3) set the value of the inverse matrix, (4) get the
## value of the inverse matrix
## the error is within makeCacheMatrix
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y){
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## This function calculates the inverse of a matrix. It first checks to see
## whether this computation has been done before and stored in the cache.
## If it has been, then it takes the inverted matrix from the cache.
## If it hasn't been, then it performs the inversion.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
setwd("C:/Users/twilson/Desktop/R/R_Crse/ProgrammingAssignment2")
source("cachematrix.R")
m=matrix(c(9,10,3,20,25,30,35,40,45,50,3,8,65,70,75,80), nrow=4, byrow=T)
m
nm = makeCacheMatrix(m)
cacheSolve(nm)
cacheSolve(nm)
im = cacheSolve(nm)
om = makeCacheMatrix(im)
cacheSolve(om)
cacheSolve(om)
## These two functions are used to invert a matrix.  Most importantly, they
## ensure that
## This function creates a special "vector" which is really a list
## containing a function to (1) set the value of the matrix, (2) get the
## value of the matrix, (3) set the value of the inverse matrix, (4) get the
## value of the inverse matrix
## the error is within makeCacheMatrix
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y){
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
## This function calculates the inverse of a matrix. It first checks to see
## whether this computation has been done before and stored in the cache.
## If it has been, then it takes the inverted matrix from the cache.
## If it hasn't been, then it performs the inversion.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getsolve
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setsolve(m)
m
}
setwd("C:/Users/twilson/Desktop/R/R_Crse/ProgrammingAssignment2")
source("cachematrix.R")
m=matrix(c(9,10,3,20,25,30,35,40,45,50,3,8,65,70,75,80), nrow=4, byrow=T)
m
nm = makeCacheMatrix(m)
cacheSolve(nm)
cacheSolve(nm)
im = cacheSolve(nm)
om = makeCacheMatrix(im)
cacheSolve(om)
cacheSolve(om)
?function
oik-=
?function()
}
?function
-20=
[=]
setwd("C:/Users/twilson/Desktop/R/R_Crse/ProgrammingAssignment2")
source("cachematrix.R")
m=matrix(c(9,10,3,20,25,30,35,40,45,50,3,8,65,70,75,80), nrow=4, byrow=T)
m
nm = makeCacheMatrix(m)
cacheSolve(nm)
cacheSolve(nm)
im = cacheSolve(nm)
om = makeCacheMatrix(im)
cacheSolve(om)
cacheSolve(om)
source('C:/Users/twilson/Desktop/R/R_Crse/ProgrammingAssignment2/cachematrix.R')
setwd("C:/Users/twilson/Desktop/R/R_Crse/ProgrammingAssignment2")
source("cachematrix.R")
m=matrix(c(9,10,3,20,25,30,35,40,45,50,3,8,65,70,75,80), nrow=4, byrow=T)
m
nm = makeCacheMatrix(m)
source("cachematrix.R")
m <- matrix(c(9,10,3,20,25,30,35,40,45,50,3,8,65,70,75,80), nrow=4, byrow=T)
m
nm <- makeCacheMatrix(m
source("cachematrix.R")
m <- matrix(c(9,10,3,20,25,30,35,40,45,50,3,8,65,70,75,80), nrow=4, byrow=T)
m
nm <- makeCacheMatrix(m)
source("cachematrix.R")
m <- matrix(c(9,10,3,20,25,30,35,40,45,50,3,8,65,70,75,80), nrow=4, byrow=T)
m
nm <- makeCacheMatrix(m)
cacheSolve(nm)
setwd("C:/Users/twilson/Desktop/R/R_Crse/ProgrammingAssignment2")
source("cachematrix.R")
m <- matrix(c(9,10,3,20,25,30,35,40,45,50,3,8,65,70,75,80), nrow=4, byrow=T)
m
nm <- makeCacheMatrix(m)
cacheSolve(nm)
cacheSolve(nm)
im <- cacheSolve(nm)
om <- makeCacheMatrix(im)
cacheSolve(om)
cacheSolve(om)
## These two functions are used to invert a matrix.  Most importantly, they
## ensure that
## This function creates a special "vector" which is really a list
## containing a function to (1) set the value of the matrix, (2) get the
## value of the matrix, (3) set the value of the inverse matrix, (4) get the
## value of the inverse matrix
## the error is within makeCacheMatrix
makeCacheMatrix <- function(x = numeric()) {
m <- NULL
set <- function(y){
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
## This function calculates the inverse of a matrix. It first checks to see
## whether this computation has been done before and stored in the cache.
## If it has been, then it takes the inverted matrix from the cache.
## If it hasn't been, then it performs the inversion.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getsolve
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setsolve(m)
m
}
setwd("C:/Users/twilson/Desktop/R/R_Crse/ProgrammingAssignment2")
source("cachematrix.R")
m <- matrix(c(9,10,3,20,25,30,35,40,45,50,3,8,65,70,75,80), nrow=4, byrow=T)
m
nm <- makeCacheMatrix(m)
cacheSolve(nm)
cacheSolve(nm)
im <- cacheSolve(nm)
om <- makeCacheMatrix(im)
cacheSolve(om)
cacheSolve(om)
setwd("C:/Users/twilson/Desktop/R/R_Crse/ProgrammingAssignment2")
source("cachematrix.R")
m <- matrix(c(9,10,3,20,25,30,35,40,45,50,3,8,65,70,75,80), nrow=4, byrow=T)
m
nm <- makeCacheMatrix(m)
cacheSolve(nm)
cacheSolve(nm)
im <- cacheSolve(nm)
om <- makeCacheMatrix(im)
cacheSolve(om)
cacheSolve(om)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
vector <- makeVector(1)
cachemean(vector)
vector <- makeVector(c(1, 2, 3))
cachemean(vector)
vector <- makeVector(c(1, 2, 3))
cachemean(vector)
cachemean(vector)
vector <- makeVector(c(1, 2, 3))
cachemean(vector)
cachemean(vector)
vector$set(c(4, 5, 6))
vector <- makeVector(c(1, 2, 3))
cachemean(vector)
cachemean(vector)
vector$set(c(4, 5, 6))
cachemean(vector)
vector <- makeVector(c(1, 2, 3))
cachemean(vector)
cachemean(vector)
vector$set(c(4, 5, 6))
cachemean(vector)
cachemean(vector)
vector <- makeVector(c(1, 2, 3))
cachemean(vector)
cachemean(vector)
vector$set(c(4, 5, 6))
cachemean(vector)
cachemean(vector)
cachemean(vector)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setmean(m)
m
}
vector <- makeVector(1)
cachemean(vector)
vector <- makeVector(c(1, 2, 3))
cachemean(vector)
cachemean(vector)
vector$set(c(4, 5, 6))
cachemean(vector)
cachemean(vector)
cachemean(vector)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setmean(m)
m
}
vector <- makeVector(1)
cachemean(vector)
vector <- makeVector(1:15)
cachemean(vector)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setmean(m)
m
}
vector <- makeVector(matrix(c(9,10,3,20,25,30,35,40,45,50,3,8,65,70,75,80),
nrow=4, byrow=T))
cachemean(vector)
vector <- makeVector(c(1, 2, 3))
cachemean(vector)
cachemean(vector)
vector$set(c(4, 5, 6))
cachemean(vector)
cachemean(vector)
cachemean(vector)
vector <- makeVector(matrix(c(9,10,3,20,25,30,35,40,45,50,3,8,65,70,75,80),
nrow=4, byrow=T))
cachemean(vector)
cachemean(vector)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setmean(m)
m
}
vector <- makeVector(matrix(c(9,10,3,20,25,30,35,40,45,50,3,8,65,70,75,80),
nrow=4, byrow=T))
cachemean(vector)
## PROGRAMMING ASSIGNMENT 2
## Includes two functions which invert a given invertible matrix
##FUNCTION 1
## This function creates a special "matrix" object that can cache its inverse.
makeCacheMatrix <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
## FUNCTION 2
## This function computes the inverse of the special "matrix" returned by
## makeCacheMatrix above. If the inverse has already been calculated (and
## the matrix has not changed), then the cachesolve should retrieve the inverse
## from the cache.
cacheSolve <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setsolve(m)
m
}
vector <- makeVector(matrix(c(9,10,3,20,25,30,35,40,45,50,3,8,65,70,75,80),
nrow=4, byrow=T))
cachemean(vector)
get <- function() x
## PROGRAMMING ASSIGNMENT 2
## Includes two functions which invert a given invertible matrix
##FUNCTION 1
## This function creates a special "matrix" object that can cache its inverse.
makeCacheMatrix <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
## FUNCTION 2
## This function computes the inverse of the special "matrix" returned by
## makeCacheMatrix above. If the inverse has already been calculated (and
## the matrix has not changed), then the cachesolve should retrieve the inverse
## from the cache.
cacheSolve <- function(x, ...) {
m <- x$getsolve()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setsolve(m)
m
}
vector <- makeCacheMatrix(matrix(c(9,10,3,20,25,30,35,40,45,50,3,8,65,70,75,80),
nrow=4, byrow=T))
cacheSolve(vector)
## PROGRAMMING ASSIGNMENT 2
## Includes two functions which invert a given invertible matrix
##FUNCTION 1
## This function creates a special "matrix" object that can cache its inverse.
makeCacheMatrix <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
## FUNCTION 2
## This function computes the inverse of the special "matrix" returned by
## makeCacheMatrix above. If the inverse has already been calculated (and
## the matrix has not changed), then the cachesolve should retrieve the inverse
## from the cache.
cacheSolve <- function(x, ...) {
m <- x$getsolve()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setsolve(m)
m
}
## TEST
##
vector <- makeCacheMatrix(matrix(c(9,10,3,20,25,30,35,40,45,50,3,8,65,70,75,80),
nrow=4, byrow=T))
vector
cacheSolve(vector)
## The above result should be the invesrse of the initial vector
cacheSolve(vector)
## The above result should be drawn from the cache and be the inverse of the
## initial vector
